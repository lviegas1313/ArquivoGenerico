using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// Configuração do ApigeeConfig
var apigeeConfig = new ApigeeConfig
{
    User = "seu-usuario",
    Password = "sua-senha",
    CertPath = "caminho/do/certificado.pfx",
    Passphrase = "sua-senha",
    TokenEndpoint = "https://api.example.com/token"
};

// Registrar ApigeeConfig como um singleton
builder.Services.AddSingleton(apigeeConfig);

// Configurar HttpClient com certificado
builder.Services.AddHttpClient("WithToken", (sp, client) =>
{
    var config = sp.GetRequiredService<ApigeeConfig>();
    client.BaseAddress = new Uri(config.TokenEndpoint);
})
.ConfigurePrimaryHttpMessageHandler(sp =>
{
    var config = sp.GetRequiredService<ApigeeConfig>();
    var handler = new HttpClientHandler();
    handler.ClientCertificates.Add(new X509Certificate2(config.CertPath, config.Passphrase));
    return handler;
});

// Registrar TokenService
builder.Services.AddSingleton<TokenService>();

var app = builder.Build();

// Endpoint para testar a obtenção do token
app.MapGet("/get-token", async (TokenService tokenService) =>
{
    try
    {
        var token = await tokenService.GetTokenAsync();
        return Results.Ok(new { Token = token });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao obter token: {ex.Message}");
    }
});

// Endpoint para testar uma requisição com o token
app.MapGet("/get-data", async (IHttpClientFactory httpClientFactory, TokenService tokenService) =>
{
    try
    {
        var client = httpClientFactory.CreateClient("WithToken");
        var token = await tokenService.GetTokenAsync();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await client.GetAsync("https://api.example.com/endpoint");
        response.EnsureSuccessStatusCode();

        var content = await response.Content.ReadAsStringAsync();
        return Results.Ok(new { Data = content });
    }
    catch (Exception ex)
    {
        return Results.Problem($"Erro ao buscar dados: {ex.Message}");
    }
});

app.Run();

// ApigeeConfig.cs
public class ApigeeConfig
{
    public string User { get; set; }
    public string Password { get; set; }
    public string CertPath { get; set; }
    public string Passphrase { get; set; }
    public string TokenEndpoint { get; set; }
}

// TokenService.cs
public class TokenService(HttpClient httpClient, ApigeeConfig config)
{
    private string _token;
    private DateTime _tokenExpiration;

    public async Task<string> GetTokenAsync()
    {
        if (!string.IsNullOrEmpty(_token) && _tokenExpiration > DateTime.UtcNow)
        {
            return _token;
        }

        // Adiciona o grant_type como parâmetro na URL
        var tokenEndpointWithParams = $"{config.TokenEndpoint}?grant_type=client_credentials";

        // Configura a autenticação Basic Auth
        var authHeader = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{config.User}:{config.Password}"));
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authHeader);

        // Envia a requisição sem corpo
        var response = await httpClient.PostAsync(tokenEndpointWithParams, null);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);

        _token = tokenResponse.AccessToken;
        _tokenExpiration = DateTime.UtcNow.AddSeconds(tokenResponse.ExpiresIn);

        return _token;
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public int ExpiresIn { get; set; }
    }
}
