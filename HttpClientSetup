// Infrastructure/Http/Handlers/CertificateHandler.cs
using System.Security.Cryptography.X509Certificates;
using Microsoft.Extensions.Options;
using YourProject.Infrastructure.Http.Settings;

namespace YourProject.Infrastructure.Http.Handlers;

public class CertificateHandler(IOptions<ApiSettings> settings) : HttpClientHandler
{
    private bool _disposed;

    public CertificateHandler()
    {
        if (settings?.Value?.Certificate == null) return;

        try
        {
            var certificate = new X509Certificate2(
                settings.Value.Certificate.Path,
                settings.Value.Certificate.Password,
                X509KeyStorageFlags.MachineKeySet | 
                X509KeyStorageFlags.PersistKeySet | 
                X509KeyStorageFlags.Exportable
            );

            ClientCertificates.Add(certificate);
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"Failed to load certificate: {ex.Message}", ex);
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (_disposed) return;

        if (disposing)
        {
            foreach (var cert in ClientCertificates)
            {
                cert.Dispose();
            }
        }

        _disposed = true;
        base.Dispose(disposing);
    }
}

// Infrastructure/Http/Extensions/HttpClientSetup.cs
public static class HttpClientSetup
{
    public static IServiceCollection AddHttpClients(
        this IServiceCollection services, 
        IConfiguration configuration)
    {
        services.Configure<ApiSettings>(
            configuration.GetSection(ApiSettings.SectionName));

        services.AddTransient<TokenInterceptor>();
        services.AddTransient<RetryHandler>();
        services.AddTransient<CircuitBreakerHandler>();

        services.AddHttpClient("AtlasApi", (sp, client) =>
        {
            var configurator = new HttpClientConfigurator(
                client, 
                sp.GetRequiredService<IOptions<ApiSettings>>()
            );
            configurator.Configure();
        })
        .ConfigurePrimaryHttpMessageHandler(sp => 
            new CertificateHandler(sp.GetRequiredService<IOptions<ApiSettings>>()))
        .AddHttpMessageHandler<TokenInterceptor>()
        .AddHttpMessageHandler<RetryHandler>()
        .AddHttpMessageHandler<CircuitBreakerHandler>();

        return services;
    }
}
