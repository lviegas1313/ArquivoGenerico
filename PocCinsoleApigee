using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Configuração do ApigeeConfig
        var apigeeConfig = new ApigeeConfig
        {
            User = "seu-usuario",
            Password = "sua-senha",
            CertPath = "caminho/do/certificado.pfx",
            Passphrase = "sua-senha",
            TokenEndpoint = "https://api.example.com/token"
        };

        // Criar o HttpClient com o interceptador de chamadas
        var handler = new HttpClientHandler();
        handler.ClientCertificates.Add(new X509Certificate2(apigeeConfig.CertPath, apigeeConfig.Passphrase));

        var tokenService = new TokenService(new HttpClient(handler), apigeeConfig);
        var tokenHandler = new TokenHandler(tokenService);

        var httpClient = new HttpClient(tokenHandler)
        {
            BaseAddress = new Uri("https://api.example.com/") // Defina o BaseAddress aqui
        };

        try
        {
            // Fazer uma requisição com o token (o interceptador adicionará o token automaticamente)
            var response = await httpClient.GetAsync("endpoint");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Dados obtidos: {content}");
            }
            else
            {
                Console.WriteLine($"Erro na requisição: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }
}

// ApigeeConfig.cs
public class ApigeeConfig
{
    public string User { get; set; }
    public string Password { get; set; }
    public string CertPath { get; set; }
    public string Passphrase { get; set; }
    public string TokenEndpoint { get; set; }
}

// TokenService.cs
public class TokenService
{
    private readonly HttpClient _httpClient;
    private readonly ApigeeConfig _config;
    private string _token;
    private DateTime _tokenExpiration;

    public TokenService(HttpClient httpClient, ApigeeConfig config)
    {
        _httpClient = httpClient;
        _config = config;
    }

    public async Task<string> GetTokenAsync()
    {
        if (!string.IsNullOrEmpty(_token) && _tokenExpiration > DateTime.UtcNow)
        {
            return _token;
        }

        // Adiciona o grant_type como parâmetro na URL
        var tokenEndpointWithParams = $"{_config.TokenEndpoint}?grant_type=client_credentials";

        // Configura a autenticação Basic Auth
        var authHeader = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{_config.User}:{_config.Password}"));
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authHeader);

        // Envia a requisição sem corpo
        var response = await _httpClient.PostAsync(tokenEndpointWithParams, null);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);

        _token = tokenResponse.AccessToken;
        _tokenExpiration = DateTime.UtcNow.AddSeconds(tokenResponse.ExpiresIn);

        return _token;
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public int ExpiresIn { get; set; }
    }
}

// TokenHandler.cs (Interceptador de Chamadas)
public class TokenHandler : DelegatingHandler
{
    private readonly TokenService _tokenService;

    public TokenHandler(TokenService tokenService)
    {
        _tokenService = tokenService;
    }

    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        // Obtém o token
        var token = await _tokenService.GetTokenAsync();

        // Adiciona o token ao cabeçalho de autorização
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        // Passa a requisição para o próximo handler na cadeia
        return await base.SendAsync(request, cancellationToken);
    }
}
