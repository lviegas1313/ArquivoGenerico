// Services/TokenService.cs
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

public class TokenService(HttpClient httpClient, TokenServiceConfig config)
{
    private string _token;
    private DateTime _tokenExpiration;

    public async Task<string> GetTokenAsync()
    {
        if (!string.IsNullOrEmpty(_token) && _tokenExpiration > DateTime.UtcNow)
        {
            return _token;
        }

        var requestContent = new StringContent(JsonSerializer.Serialize(new
        {
            client_id = config.ClientId,
            client_secret = config.ClientSecret,
            cert_path = config.CertPath,
            key_path = config.KeyPath,
            passphrase = config.Passphrase
        }), Encoding.UTF8, "application/json");

        var response = await httpClient.PostAsync(config.TokenEndpoint, requestContent);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);

        _token = tokenResponse.AccessToken;
        _tokenExpiration = DateTime.UtcNow.AddSeconds(tokenResponse.ExpiresIn);

        return _token;
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public int ExpiresIn { get; set; }
    }
}

public class TokenServiceConfig
{
    public string ClientId { get; set; }
    public string ClientSecret { get; set; }
    public string CertPath { get; set; }
    public string KeyPath { get; set; }
    public string Passphrase { get; set; }
    public string TokenEndpoint { get; set; }
}

// Handlers/TokenHandler.cs
public class TokenHandler(TokenService tokenService) : DelegatingHandler
{
    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        var token = await tokenService.GetTokenAsync();
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        return await base.SendAsync(request, cancellationToken);
    }
}

// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Configure services
builder.Services.Configure<TokenServiceConfig>(builder.Configuration.GetSection("TokenService"));
builder.Services.AddHttpClient("WithToken")
    .AddHttpMessageHandler<TokenHandler>();

builder.Services.AddSingleton<TokenService>();
builder.Services.AddTransient<TokenHandler>();

var app = builder.Build();

// Example usage
app.MapGet("/get-data", async (IHttpClientFactory httpClientFactory) =>
{
    var client = httpClientFactory.CreateClient("WithToken");
    var response = await client.GetAsync("https://api.example.com/endpoint");
    response.EnsureSuccessStatusCode();
    var content = await response.Content.ReadAsStringAsync();

    return Results.Json(content);
});

// Configure middleware to intercept all requests
app.Use(async (context, next) =>
{
    var factory = context.RequestServices.GetRequiredService<IHttpClientFactory>();
    var client = factory.CreateClient("WithToken");
    context.Items["HttpClient"] = client;
    await next();
});

app.Run();
