using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

// ApigeeConfig.cs
public class ApigeeConfig
{
    public string User { get; set; }
    public string Password { get; set; }
    public string CertPath { get; set; }
    public string Passphrase { get; set; }
    public string TokenEndpoint { get; set; }
}

// TokenService.cs
public class TokenService(HttpClient httpClient, ApigeeConfig config)
{
    private string _token;
    private DateTime _tokenExpiration;

    public async Task<string> GetTokenAsync()
    {
        if (!string.IsNullOrEmpty(_token) && _tokenExpiration > DateTime.UtcNow)
        {
            return _token;
        }

        // Adiciona o grant_type como parâmetro na URL
        var tokenEndpointWithParams = $"{config.TokenEndpoint}?grant_type=client_credentials";

        // Configura a autenticação Basic Auth
        var authHeader = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{config.User}:{config.Password}"));
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authHeader);

        // Envia a requisição sem corpo
        var response = await httpClient.PostAsync(tokenEndpointWithParams, null);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);

        _token = tokenResponse.AccessToken;
        _tokenExpiration = DateTime.UtcNow.AddSeconds(tokenResponse.ExpiresIn);

        return _token;
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public int ExpiresIn { get; set; }
    }
}

// TokenHandler.cs
public class TokenHandler(TokenService tokenService) : DelegatingHandler
{
    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        var token = await tokenService.GetTokenAsync();
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        return await base.SendAsync(request, cancellationToken);
    }
}

// DataController.cs
[ApiController]
[Route("api/[controller]")]
public class DataController : ControllerBase
{
    private readonly IHttpClientFactory _httpClientFactory;

    public DataController(IHttpClientFactory httpClientFactory)
    {
        _httpClientFactory = httpClientFactory;
    }

    [HttpGet]
    public async Task<IActionResult> GetDataAsync()
    {
        var client = _httpClientFactory.CreateClient("WithToken");
        var response = await client.GetAsync("https://api.example.com/endpoint");

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            return Ok(content);
        }

        return StatusCode((int)response.StatusCode, "Erro ao buscar dados");
    }
}

// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Registrar ApigeeConfig diretamente no contêiner de DI
builder.Services.AddSingleton<ApigeeConfig>(sp =>
{
    var config = new ApigeeConfig();
    builder.Configuration.GetSection("ApigeeConfig").Bind(config);
    return config;
});

// Registrar HttpClient com certificado e TokenHandler
builder.Services.AddHttpClient("WithToken", (sp, client) =>
{
    var config = sp.GetRequiredService<ApigeeConfig>();
    client.BaseAddress = new Uri(config.TokenEndpoint);
})
.ConfigurePrimaryHttpMessageHandler(sp =>
{
    var config = sp.GetRequiredService<ApigeeConfig>();
    var handler = new HttpClientHandler();
    handler.ClientCertificates.Add(new System.Security.Cryptography.X509Certificates.X509Certificate2(config.CertPath, config.Passphrase));
    return handler;
})
.AddHttpMessageHandler<TokenHandler>();

// Registrar TokenService e TokenHandler
builder.Services.AddSingleton<TokenService>();
builder.Services.AddTransient<TokenHandler>();

// Registrar Controllers
builder.Services.AddControllers();

var app = builder.Build();

// Mapear Controllers
app.MapControllers();

app.Run();
