using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Mvc;

var builder = WebApplication.CreateBuilder(args);

// Registrar ApigeeConfig a partir do appsettings.json
builder.Services.Configure<ApigeeConfig>(builder.Configuration.GetSection("ApigeeConfig"));

// Registrar serviços
builder.Services.AddHttpClient(); // HttpClient genérico
builder.Services.AddSingleton<TokenService>();
builder.Services.AddSingleton<ApiAtlasService>();

// Registrar controllers
builder.Services.AddControllers();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}

app.UseRouting();

app.MapControllers();

app.Run();

// Configuração do ApigeeConfig
public record ApigeeConfig(
    string User,
    string Password,
    string CertPath,
    string Passphrase,
    string TokenEndpoint
);

// TokenService.cs
public class TokenService(HttpClient httpClient, ApigeeConfig config)
{
    private string _token;
    private DateTime _tokenExpiration;

    public async Task<string> GetTokenAsync()
    {
        if (!string.IsNullOrEmpty(_token) && _tokenExpiration > DateTime.UtcNow)
        {
            return _token;
        }

        // Configura o HttpClient com o certificado
        var handler = new HttpClientHandler();
        handler.ClientCertificates.Add(new X509Certificate2(config.CertPath, config.Passphrase));
        var client = new HttpClient(handler);

        // Adiciona o grant_type como parâmetro na URL
        var tokenEndpointWithParams = $"{config.TokenEndpoint}?grant_type=client_credentials";

        // Configura a autenticação Basic Auth
        var authHeader = Convert.ToBase64String(Encoding.UTF8.GetBytes($"{config.User}:{config.Password}"));
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authHeader);

        // Envia a requisição sem corpo
        var response = await client.PostAsync(tokenEndpointWithParams, null);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);

        _token = tokenResponse.AccessToken;
        _tokenExpiration = DateTime.UtcNow.AddSeconds(tokenResponse.ExpiresIn);

        return _token;
    }

    private record TokenResponse(string AccessToken, int ExpiresIn);
}

// ApiAtlasService.cs
public class ApiAtlasService(HttpClient httpClient, TokenService tokenService)
{
    public async Task<string> GetDataFromAtlasAsync()
    {
        try
        {
            // Obtém o token
            var token = await tokenService.GetTokenAsync();

            // Configura o token no cabeçalho de autorização
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Faz a requisição à API Atlas
            var response = await httpClient.GetAsync("https://api.atlas.example.com/endpoint");
            response.EnsureSuccessStatusCode();

            // Retorna o conteúdo da resposta
            return await response.Content.ReadAsStringAsync();
        }
        catch (Exception ex)
        {
            // Trata erros
            throw new ApplicationException("Erro ao buscar dados da API Atlas.", ex);
        }
    }
}

// AtlasController.cs
[ApiController]
[Route("api/[controller]")]
public class AtlasController(ApiAtlasService apiAtlasService) : ControllerBase
{
    [HttpGet("data")]
    public async Task<IActionResult> GetDataAsync()
    {
        try
        {
            var data = await apiAtlasService.GetDataFromAtlasAsync();
            return Ok(data);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Erro ao buscar dados da API Atlas: {ex.Message}");
        }
    }
}
