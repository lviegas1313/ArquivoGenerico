// === Log4NetSettings.cs ===
public sealed class Log4NetSettings
{
    public required string ConfigFilePath { get; set; }
    public required string LogLevel { get; set; }
    public required string LogFilePath { get; set; }
    public required int MaxFileSizeMB { get; set; }
    public required int MaxBackupFiles { get; set; }
}

// === Logging/Log4NetLogger.cs ===
internal sealed class Log4NetLogger(
    string categoryName,
    IOptionsMonitor<Log4NetSettings> settings) : ILogger
{
    private readonly ILog _log = LogManager.GetLogger(Assembly.GetEntryAssembly(), categoryName);

    public IDisposable BeginScope<TState>(TState state) where TState : notnull => 
        NullScope.Instance;

    public bool IsEnabled(LogLevel logLevel) => 
        logLevel >= LogLevelConverter.ToMicrosoftLogLevel(settings.CurrentValue.LogLevel);

    public void Log<TState>(
        LogLevel logLevel,
        EventId eventId,
        TState state,
        Exception? exception,
        Func<TState, Exception?, string> formatter)
    {
        if (!IsEnabled(logLevel)) return;

        var message = formatter(state, exception);
        var log4NetLevel = LogLevelConverter.ToLog4NetLevel(logLevel);
        
        _log.Logger.Log(new LoggingEvent(
            new LoggingEventData
            {
                Level = log4NetLevel,
                Message = message,
                ExceptionString = exception?.ToString(),
                LoggerName = _log.Logger.Name,
                TimeStamp = DateTime.Now,
                Properties = new PropertiesDictionary()
            }));
    }
}

// === Logging/Log4NetLoggerProvider.cs ===
public sealed class Log4NetLoggerProvider(
    IOptionsMonitor<Log4NetSettings> settings,
    ILog4NetInitializer initializer) : ILoggerProvider
{
    private readonly ConcurrentDictionary<string, ILogger> _loggers = new();

    public Log4NetLoggerProvider(IOptionsMonitor<Log4NetSettings> settings) 
        : this(settings, new Log4NetInitializer())
    {
        initializer.Initialize(settings.CurrentValue);
    }

    public ILogger CreateLogger(string categoryName) =>
        _loggers.GetOrAdd(categoryName, name => new Log4NetLogger(name, settings));

    public void Dispose()
    {
        _loggers.Clear();
        GC.SuppressFinalize(this);
    }
}

// === Logging/Log4NetInitializer.cs ===
internal sealed class Log4NetInitializer : ILog4NetInitializer
{
    private static readonly object InitLock = new();
    private static bool _isInitialized;

    public void Initialize(Log4NetSettings settings)
    {
        if (_isInitialized) return;
        
        lock (InitLock)
        {
            if (_isInitialized) return;

            ConfigureLog4Net(settings);
            _isInitialized = true;
        }
    }

    private static void ConfigureLog4Net(Log4NetSettings settings)
    {
        GlobalContext.Properties["LogFilePath"] = settings.LogFilePath;
        GlobalContext.Properties["MaxFileSize"] = $"{settings.MaxFileSizeMB}MB";
        GlobalContext.Properties["MaxBackupFiles"] = settings.MaxBackupFiles;

        var logRepository = LogManager.GetRepository(Assembly.GetEntryAssembly());
        XmlConfigurator.Configure(logRepository, new FileInfo(settings.ConfigFilePath));
        
        logRepository.Threshold = LogLevelConverter.ToLog4NetLevel(settings.LogLevel);
        EnsureLogDirectory(settings.LogFilePath);
    }

    private static void EnsureLogDirectory(string logFilePath)
    {
        var logDirectory = Path.GetDirectoryName(logFilePath);
        if (!string.IsNullOrEmpty(logDirectory) && !Directory.Exists(logDirectory))
        {
            Directory.CreateDirectory(logDirectory);
        }
    }
}
